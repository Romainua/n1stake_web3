{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcClient = void 0;\n\nconst stream_1 = require(\"@cosmjs/stream\");\n\nconst types_1 = require(\"./types\");\n/**\n * A thin wrapper that is used to bring together requests and responses by ID.\n *\n * Using this class is only advised for continous communication channels like\n * WebSockets or WebWorker messaging.\n */\n\n\nclass JsonRpcClient {\n  constructor(connection) {\n    this.connection = connection;\n  }\n\n  async run(request) {\n    const filteredStream = this.connection.responseStream.filter(r => r.id === request.id);\n    const pendingResponses = stream_1.firstEvent(filteredStream);\n    this.connection.sendRequest(request);\n    const response = await pendingResponses;\n\n    if (types_1.isJsonRpcErrorResponse(response)) {\n      const error = response.error;\n      throw new Error(`JSON RPC error: code=${error.code}; message='${error.message}'`);\n    }\n\n    return response;\n  }\n\n}\n\nexports.JsonRpcClient = JsonRpcClient;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGA;AAOA;;;;;;;;AAMA,MAAaA,aAAb,CAA0B;EAGxBC,YAAmBC,UAAnB,EAAyF;IACvF,KAAKA,UAAL,GAAkBA,UAAlB;EACD;;EAEe,MAAHC,GAAG,CAACC,OAAD,EAAwB;IACtC,MAAMC,cAAc,GAAG,KAAKH,UAAL,CAAgBI,cAAhB,CAA+BC,MAA/B,CAAuCC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASL,OAAO,CAACK,EAA9D,CAAvB;IACA,MAAMC,gBAAgB,GAAGC,oBAAWN,cAAX,CAAzB;IACA,KAAKH,UAAL,CAAgBU,WAAhB,CAA4BR,OAA5B;IAEA,MAAMS,QAAQ,GAAG,MAAMH,gBAAvB;;IACA,IAAII,+BAAuBD,QAAvB,CAAJ,EAAsC;MACpC,MAAME,KAAK,GAAGF,QAAQ,CAACE,KAAvB;MACA,MAAM,IAAIC,KAAJ,CAAU,wBAAwBD,KAAK,CAACE,IAAI,cAAcF,KAAK,CAACG,OAAO,GAAvE,CAAN;IACD;;IAED,OAAOL,QAAP;EACD;;AAnBuB;;AAA1BM","names":["JsonRpcClient","constructor","connection","run","request","filteredStream","responseStream","filter","r","id","pendingResponses","stream_1","sendRequest","response","types_1","error","Error","code","message","exports"],"sourceRoot":"","sources":["../src/jsonrpcclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}