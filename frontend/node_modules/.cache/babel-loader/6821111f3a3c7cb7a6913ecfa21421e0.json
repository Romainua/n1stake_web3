{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseJsonRpcResponse = exports.parseJsonRpcSuccessResponse = exports.parseJsonRpcErrorResponse = exports.parseJsonRpcRequest = exports.parseJsonRpcId = void 0;\n\nconst compatibility_1 = require(\"./compatibility\");\n/**\n * Extracts ID field from request or response object.\n *\n * Returns `null` when no valid ID was found.\n */\n\n\nfunction parseJsonRpcId(data) {\n  if (!compatibility_1.isJsonCompatibleDictionary(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n\n  const id = data.id;\n\n  if (typeof id !== \"number\" && typeof id !== \"string\") {\n    return null;\n  }\n\n  return id;\n}\n\nexports.parseJsonRpcId = parseJsonRpcId;\n\nfunction parseJsonRpcRequest(data) {\n  if (!compatibility_1.isJsonCompatibleDictionary(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(`Got unexpected jsonrpc version: ${data.jsonrpc}`);\n  }\n\n  const id = parseJsonRpcId(data);\n\n  if (id === null) {\n    throw new Error(\"Invalid id field\");\n  }\n\n  const method = data.method;\n\n  if (typeof method !== \"string\") {\n    throw new Error(\"Invalid method field\");\n  }\n\n  if (!compatibility_1.isJsonCompatibleArray(data.params) && !compatibility_1.isJsonCompatibleDictionary(data.params)) {\n    throw new Error(\"Invalid params field\");\n  }\n\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    method: method,\n    params: data.params\n  };\n}\n\nexports.parseJsonRpcRequest = parseJsonRpcRequest;\n\nfunction parseError(error) {\n  if (typeof error.code !== \"number\") {\n    throw new Error(\"Error property 'code' is not a number\");\n  }\n\n  if (typeof error.message !== \"string\") {\n    throw new Error(\"Error property 'message' is not a string\");\n  }\n\n  let maybeUndefinedData;\n\n  if (error.data === undefined) {\n    maybeUndefinedData = undefined;\n  } else if (compatibility_1.isJsonCompatibleValue(error.data)) {\n    maybeUndefinedData = error.data;\n  } else {\n    throw new Error(\"Error property 'data' is defined but not a JSON compatible value.\");\n  }\n\n  return Object.assign({\n    code: error.code,\n    message: error.message\n  }, maybeUndefinedData !== undefined ? {\n    data: maybeUndefinedData\n  } : {});\n}\n/** Throws if data is not a JsonRpcErrorResponse */\n\n\nfunction parseJsonRpcErrorResponse(data) {\n  if (!compatibility_1.isJsonCompatibleDictionary(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(`Got unexpected jsonrpc version: ${JSON.stringify(data)}`);\n  }\n\n  const id = data.id;\n\n  if (typeof id !== \"number\" && typeof id !== \"string\" && id !== null) {\n    throw new Error(\"Invalid id field\");\n  }\n\n  if (typeof data.error === \"undefined\" || !compatibility_1.isJsonCompatibleDictionary(data.error)) {\n    throw new Error(\"Invalid error field\");\n  }\n\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    error: parseError(data.error)\n  };\n}\n\nexports.parseJsonRpcErrorResponse = parseJsonRpcErrorResponse;\n/** Throws if data is not a JsonRpcSuccessResponse */\n\nfunction parseJsonRpcSuccessResponse(data) {\n  if (!compatibility_1.isJsonCompatibleDictionary(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(`Got unexpected jsonrpc version: ${JSON.stringify(data)}`);\n  }\n\n  const id = data.id;\n\n  if (typeof id !== \"number\" && typeof id !== \"string\") {\n    throw new Error(\"Invalid id field\");\n  }\n\n  if (typeof data.result === \"undefined\") {\n    throw new Error(\"Invalid result field\");\n  }\n\n  const result = data.result;\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    result: result\n  };\n}\n\nexports.parseJsonRpcSuccessResponse = parseJsonRpcSuccessResponse;\n/**\n * Returns a JsonRpcErrorResponse if input can be parsed as a JSON-RPC error. Otherwise parses\n * input as JsonRpcSuccessResponse. Throws if input is neither a valid error nor success response.\n */\n\nfunction parseJsonRpcResponse(data) {\n  let response;\n\n  try {\n    response = parseJsonRpcErrorResponse(data);\n  } catch (_) {\n    response = parseJsonRpcSuccessResponse(data);\n  }\n\n  return response;\n}\n\nexports.parseJsonRpcResponse = parseJsonRpcResponse;","map":{"version":3,"mappings":"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","names":["parseJsonRpcId","data","compatibility_1","Error","id","exports","parseJsonRpcRequest","jsonrpc","method","params","parseError","error","code","message","maybeUndefinedData","undefined","parseJsonRpcErrorResponse","JSON","stringify","parseJsonRpcSuccessResponse","result","parseJsonRpcResponse","response","_"],"sourceRoot":"","sources":["../src/parse.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}