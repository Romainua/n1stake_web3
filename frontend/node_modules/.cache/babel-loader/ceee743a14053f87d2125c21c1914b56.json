{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeMultisignedTx = exports.makeCompactBitArray = void 0;\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst multisig_1 = require(\"cosmjs-types/cosmos/crypto/multisig/v1beta1/multisig\");\n\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\n\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst tx_2 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nfunction makeCompactBitArray(bits) {\n  const byteCount = Math.ceil(bits.length / 8);\n  const extraBits = bits.length - Math.floor(bits.length / 8) * 8;\n  const bytes = new Uint8Array(byteCount); // zero-filled\n\n  bits.forEach((value, index) => {\n    const bytePos = Math.floor(index / 8);\n    const bitPos = index % 8; // eslint-disable-next-line no-bitwise\n\n    if (value) bytes[bytePos] |= 0b1 << 8 - 1 - bitPos;\n  });\n  return multisig_1.CompactBitArray.fromPartial({\n    elems: bytes,\n    extraBitsStored: extraBits\n  });\n}\n\nexports.makeCompactBitArray = makeCompactBitArray;\n\nfunction makeMultisignedTx(multisigPubkey, sequence, fee, bodyBytes, signatures) {\n  const addresses = Array.from(signatures.keys());\n  const prefix = encoding_1.Bech32.decode(addresses[0]).prefix;\n  const signers = Array(multisigPubkey.value.pubkeys.length).fill(false);\n  const signaturesList = new Array();\n\n  for (let i = 0; i < multisigPubkey.value.pubkeys.length; i++) {\n    const signerAddress = amino_1.pubkeyToAddress(multisigPubkey.value.pubkeys[i], prefix);\n    const signature = signatures.get(signerAddress);\n\n    if (signature) {\n      signers[i] = true;\n      signaturesList.push(signature);\n    }\n  }\n\n  const signerInfo = {\n    publicKey: proto_signing_1.encodePubkey(multisigPubkey),\n    modeInfo: {\n      multi: {\n        bitarray: makeCompactBitArray(signers),\n        modeInfos: signaturesList.map(_ => ({\n          single: {\n            mode: signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON\n          }\n        }))\n      }\n    },\n    sequence: long_1.default.fromNumber(sequence)\n  };\n  const authInfo = tx_1.AuthInfo.fromPartial({\n    signerInfos: [signerInfo],\n    fee: {\n      amount: [...fee.amount],\n      gasLimit: long_1.default.fromString(fee.gas)\n    }\n  });\n  const authInfoBytes = tx_1.AuthInfo.encode(authInfo).finish();\n  const signedTx = tx_2.TxRaw.fromPartial({\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    signatures: [multisig_1.MultiSignature.encode(multisig_1.MultiSignature.fromPartial({\n      signatures: signaturesList\n    })).finish()]\n  });\n  return signedTx;\n}\n\nexports.makeMultisignedTx = makeMultisignedTx;","map":{"version":3,"mappings":"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","names":["makeCompactBitArray","bits","byteCount","Math","ceil","length","extraBits","floor","bytes","Uint8Array","forEach","value","index","bytePos","bitPos","multisig_1","fromPartial","elems","extraBitsStored","exports","makeMultisignedTx","multisigPubkey","sequence","fee","bodyBytes","signatures","addresses","Array","from","keys","prefix","encoding_1","decode","signers","pubkeys","fill","signaturesList","i","signerAddress","amino_1","signature","get","push","signerInfo","publicKey","proto_signing_1","modeInfo","multi","bitarray","modeInfos","map","_","single","mode","signing_1","SIGN_MODE_LEGACY_AMINO_JSON","long_1","fromNumber","authInfo","tx_1","signerInfos","amount","gasLimit","fromString","gas","authInfoBytes","encode","finish","signedTx","tx_2"],"sourceRoot":"","sources":["../src/multisignature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}