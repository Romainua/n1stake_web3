{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SHA2 = void 0;\n\nconst utils_js_1 = require(\"./utils.js\"); // Polyfill for Safari 14\n\n\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n\n  const _32n = BigInt(32);\n\n  const _u32_max = BigInt(0xffffffff);\n\n  const wh = Number(value >> _32n & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n} // Base SHA2 class (RFC 6234)\n\n\nclass SHA2 extends utils_js_1.Hash {\n  constructor(blockLen, outputLen, padOffset, isLE) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.finished = false;\n    this.length = 0;\n    this.pos = 0;\n    this.destroyed = false;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = (0, utils_js_1.createView)(this.buffer);\n  }\n\n  update(data) {\n    if (this.destroyed) throw new Error('instance is destroyed');\n    const {\n      view,\n      buffer,\n      blockLen,\n      finished\n    } = this;\n    if (finished) throw new Error('digest() was already called');\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos); // Fast path: we have at least one block in input, cast it to view and process\n\n      if (take === blockLen) {\n        const dataView = (0, utils_js_1.createView)(data);\n\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n\n        continue;\n      }\n\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n\n  digestInto(out) {\n    if (this.destroyed) throw new Error('instance is destroyed');\n    if (!(out instanceof Uint8Array) || out.length < this.outputLen) throw new Error('_Sha2: Invalid output buffer');\n    if (this.finished) throw new Error('digest() was already called');\n    this.finished = true; // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n\n    const {\n      buffer,\n      view,\n      blockLen,\n      isLE\n    } = this;\n    let {\n      pos\n    } = this; // append the bit '1' to the message\n\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0); // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    } // Pad until full block byte with zeros\n\n\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0; // NOTE: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64bit of that value.\n\n\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = (0, utils_js_1.createView)(out);\n    this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n  }\n\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n\n  _cloneInto(to) {\n    to || (to = new this.constructor());\n    to.set(...this.get());\n    const {\n      blockLen,\n      buffer,\n      length,\n      finished,\n      destroyed,\n      pos\n    } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n\n}\n\nexports.SHA2 = SHA2;","map":{"version":3,"names":["Object","defineProperty","exports","value","SHA2","utils_js_1","require","setBigUint64","view","byteOffset","isLE","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","Hash","constructor","blockLen","outputLen","padOffset","finished","length","pos","destroyed","buffer","Uint8Array","createView","update","data","Error","toBytes","len","take","Math","min","dataView","process","set","subarray","roundClean","digestInto","out","fill","i","oview","get","forEach","v","digest","res","slice","destroy","_cloneInto","to"],"sources":["/home/dfound/frontend_dApp/node_modules/@noble/hashes/_sha2.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        if (this.destroyed)\n            throw new Error('instance is destroyed');\n        const { view, buffer, blockLen, finished } = this;\n        if (finished)\n            throw new Error('digest() was already called');\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        if (this.destroyed)\n            throw new Error('instance is destroyed');\n        if (!(out instanceof Uint8Array) || out.length < this.outputLen)\n            throw new Error('_Sha2: Invalid output buffer');\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // NOTE: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64bit of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}