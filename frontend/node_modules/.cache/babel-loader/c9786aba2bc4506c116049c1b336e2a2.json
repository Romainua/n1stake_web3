{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst tx_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/tx\");\n\nconst tx_2 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\n\nconst tx_3 = require(\"cosmjs-types/cosmos/gov/v1beta1/tx\");\n\nconst tx_4 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\n\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\n\nconst tx_5 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst tx_6 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\n\nconst tx_7 = require(\"cosmjs-types/ibc/core/channel/v1/tx\");\n\nconst tx_8 = require(\"cosmjs-types/ibc/core/client/v1/tx\");\n\nconst tx_9 = require(\"cosmjs-types/ibc/core/connection/v1/tx\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst aminotypes_1 = require(\"./aminotypes\");\n\nconst stargateclient_1 = require(\"./stargateclient\");\n\nexports.defaultRegistryTypes = [[\"/cosmos.bank.v1beta1.MsgMultiSend\", tx_1.MsgMultiSend], [\"/cosmos.distribution.v1beta1.MsgFundCommunityPool\", tx_2.MsgFundCommunityPool], [\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\", tx_2.MsgSetWithdrawAddress], [\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\", tx_2.MsgWithdrawDelegatorReward], [\"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\", tx_2.MsgWithdrawValidatorCommission], [\"/cosmos.gov.v1beta1.MsgDeposit\", tx_3.MsgDeposit], [\"/cosmos.gov.v1beta1.MsgSubmitProposal\", tx_3.MsgSubmitProposal], [\"/cosmos.gov.v1beta1.MsgVote\", tx_3.MsgVote], [\"/cosmos.staking.v1beta1.MsgBeginRedelegate\", tx_4.MsgBeginRedelegate], [\"/cosmos.staking.v1beta1.MsgCreateValidator\", tx_4.MsgCreateValidator], [\"/cosmos.staking.v1beta1.MsgDelegate\", tx_4.MsgDelegate], [\"/cosmos.staking.v1beta1.MsgEditValidator\", tx_4.MsgEditValidator], [\"/cosmos.staking.v1beta1.MsgUndelegate\", tx_4.MsgUndelegate], [\"/ibc.core.channel.v1.MsgChannelOpenInit\", tx_7.MsgChannelOpenInit], [\"/ibc.core.channel.v1.MsgChannelOpenTry\", tx_7.MsgChannelOpenTry], [\"/ibc.core.channel.v1.MsgChannelOpenAck\", tx_7.MsgChannelOpenAck], [\"/ibc.core.channel.v1.MsgChannelOpenConfirm\", tx_7.MsgChannelOpenConfirm], [\"/ibc.core.channel.v1.MsgChannelCloseInit\", tx_7.MsgChannelCloseInit], [\"/ibc.core.channel.v1.MsgChannelCloseConfirm\", tx_7.MsgChannelCloseConfirm], [\"/ibc.core.channel.v1.MsgRecvPacket\", tx_7.MsgRecvPacket], [\"/ibc.core.channel.v1.MsgTimeout\", tx_7.MsgTimeout], [\"/ibc.core.channel.v1.MsgTimeoutOnClose\", tx_7.MsgTimeoutOnClose], [\"/ibc.core.channel.v1.MsgAcknowledgement\", tx_7.MsgAcknowledgement], [\"/ibc.core.client.v1.MsgCreateClient\", tx_8.MsgCreateClient], [\"/ibc.core.client.v1.MsgUpdateClient\", tx_8.MsgUpdateClient], [\"/ibc.core.client.v1.MsgUpgradeClient\", tx_8.MsgUpgradeClient], [\"/ibc.core.client.v1.MsgSubmitMisbehaviour\", tx_8.MsgSubmitMisbehaviour], [\"/ibc.core.connection.v1.MsgConnectionOpenInit\", tx_9.MsgConnectionOpenInit], [\"/ibc.core.connection.v1.MsgConnectionOpenTry\", tx_9.MsgConnectionOpenTry], [\"/ibc.core.connection.v1.MsgConnectionOpenAck\", tx_9.MsgConnectionOpenAck], [\"/ibc.core.connection.v1.MsgConnectionOpenConfirm\", tx_9.MsgConnectionOpenConfirm], [\"/ibc.applications.transfer.v1.MsgTransfer\", tx_6.MsgTransfer]];\n\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\n\nclass SigningStargateClient extends stargateclient_1.StargateClient {\n  constructor(tmClient, signer, options) {\n    super(tmClient);\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new aminotypes_1.AminoTypes({\n        prefix: options.prefix\n      })\n    } = options;\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n  }\n\n  static async connectWithSigner(endpoint, signer) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningStargateClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n\n\n  static async offline(signer) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new SigningStargateClient(undefined, signer, options);\n  }\n\n  async sendTokens(senderAddress, recipientAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n  }\n\n  async delegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_4.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n  }\n\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_4.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n  }\n\n  async withdrawRewards(delegatorAddress, validatorAddress, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const withdrawMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_2.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo);\n  }\n\n  async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight,\n  /** timeout in seconds */\n  timeoutTimestamp, fee) {\n    let memo = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : \"\";\n    const timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n    const transferMsg = {\n      typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n      value: tx_6.MsgTransfer.fromPartial({\n        sourcePort: sourcePort,\n        sourceChannel: sourceChannel,\n        sender: senderAddress,\n        receiver: recipientAddress,\n        token: transferAmount,\n        timeoutHeight: timeoutHeight,\n        timeoutTimestamp: timeoutTimestampNanoseconds\n      })\n    };\n    return this.signAndBroadcast(senderAddress, [transferMsg], fee, memo);\n  }\n\n  async signAndBroadcast(signerAddress, messages, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const txRaw = await this.sign(signerAddress, messages, fee, memo);\n    const txBytes = tx_5.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature and assembles the signed transaction.\n   *\n   * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n   *\n   * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n   * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n   * (See the SigningStargateClient.offline constructor).\n   */\n\n\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n\n    return proto_signing_1.isOfflineDirectSigner(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n\n  async signAmino(signerAddress, messages, fee, memo, _ref) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref;\n    utils_1.assert(!proto_signing_1.isOfflineDirectSigner(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = amino_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n      memo: signed.memo\n    };\n    const signedTxBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: signedTxBody\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = proto_signing_1.makeAuthInfoBytes([{\n      pubkey,\n      sequence: signedSequence\n    }], signed.fee.amount, signedGasLimit, signMode);\n    return tx_5.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [encoding_1.fromBase64(signature.signature)]\n    });\n  }\n\n  async signDirect(signerAddress, messages, fee, memo, _ref2) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref2;\n    utils_1.assert(proto_signing_1.isOfflineDirectSigner(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n    const txBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBodyEncodeObject);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = proto_signing_1.makeAuthInfoBytes([{\n      pubkey,\n      sequence\n    }], fee.amount, gasLimit);\n    const signDoc = proto_signing_1.makeSignDoc(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_5.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [encoding_1.fromBase64(signature.signature)]\n    });\n  }\n\n}\n\nexports.SigningStargateClient = SigningStargateClient;","map":{"version":3,"mappings":"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","names":["exports","tx_1","tx_2","tx_3","tx_4","tx_7","tx_8","tx_9","tx_6","createDefaultRegistry","proto_signing_1","SigningStargateClient","stargateclient_1","constructor","tmClient","signer","options","registry","aminoTypes","aminotypes_1","prefix","broadcastTimeoutMs","broadcastPollIntervalMs","connectWithSigner","endpoint","tendermint_rpc_1","connect","offline","undefined","sendTokens","senderAddress","recipientAddress","amount","fee","memo","sendMsg","typeUrl","value","fromAddress","toAddress","signAndBroadcast","delegateTokens","delegatorAddress","validatorAddress","delegateMsg","fromPartial","undelegateTokens","undelegateMsg","withdrawRewards","withdrawMsg","sendIbcTokens","transferAmount","sourcePort","sourceChannel","timeoutHeight","timeoutTimestamp","timeoutTimestampNanoseconds","long_1","fromNumber","multiply","transferMsg","sender","receiver","token","signerAddress","messages","txRaw","sign","txBytes","tx_5","encode","finish","broadcastTx","explicitSignerData","signerData","accountNumber","sequence","getSequence","chainId","getChainId","signDirect","signAmino","utils_1","accountFromSigner","getAccounts","find","account","address","Error","pubkey","amino_1","signMode","signing_1","SIGN_MODE_LEGACY_AMINO_JSON","msgs","map","msg","toAmino","signDoc","signature","signed","signedTxBody","fromAmino","signedTxBodyEncodeObject","signedTxBodyBytes","signedGasLimit","math_1","fromString","gas","toNumber","signedSequence","signedAuthInfoBytes","bodyBytes","authInfoBytes","signatures","encoding_1","txBodyEncodeObject","txBodyBytes","gasLimit"],"sourceRoot":"","sources":["../src/signingstargateclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}