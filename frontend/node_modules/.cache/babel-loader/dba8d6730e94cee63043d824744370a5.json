{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StargateClient = exports.assertIsBroadcastTxSuccess = exports.isBroadcastTxSuccess = exports.isBroadcastTxFailure = exports.TimeoutError = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst accounts_1 = require(\"./accounts\");\n\nconst queries_1 = require(\"./queries\");\n\nconst search_1 = require(\"./search\");\n\nclass TimeoutError extends Error {\n  constructor(message, txId) {\n    super(message);\n    this.txId = txId;\n  }\n\n}\n\nexports.TimeoutError = TimeoutError;\n\nfunction isBroadcastTxFailure(result) {\n  return !!result.code;\n}\n\nexports.isBroadcastTxFailure = isBroadcastTxFailure;\n\nfunction isBroadcastTxSuccess(result) {\n  return !isBroadcastTxFailure(result);\n}\n\nexports.isBroadcastTxSuccess = isBroadcastTxSuccess;\n/**\n * Ensures the given result is a success. Throws a detailed error message otherwise.\n */\n\nfunction assertIsBroadcastTxSuccess(result) {\n  if (isBroadcastTxFailure(result)) {\n    throw new Error(`Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\n\nexports.assertIsBroadcastTxSuccess = assertIsBroadcastTxSuccess;\n\nclass StargateClient {\n  constructor(tmClient) {\n    if (tmClient) {\n      this.tmClient = tmClient;\n      this.queryClient = queries_1.QueryClient.withExtensions(tmClient, queries_1.setupAuthExtension, queries_1.setupBankExtension, queries_1.setupStakingExtension);\n    }\n  }\n\n  static async connect(endpoint) {\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new StargateClient(tmClient);\n  }\n\n  getTmClient() {\n    return this.tmClient;\n  }\n\n  forceGetTmClient() {\n    if (!this.tmClient) {\n      throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n    }\n\n    return this.tmClient;\n  }\n\n  getQueryClient() {\n    return this.queryClient;\n  }\n\n  forceGetQueryClient() {\n    if (!this.queryClient) {\n      throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n    }\n\n    return this.queryClient;\n  }\n\n  async getChainId() {\n    if (!this.chainId) {\n      const response = await this.forceGetTmClient().status();\n      const chainId = response.nodeInfo.network;\n      if (!chainId) throw new Error(\"Chain ID must not be empty\");\n      this.chainId = chainId;\n    }\n\n    return this.chainId;\n  }\n\n  async getHeight() {\n    const status = await this.forceGetTmClient().status();\n    return status.syncInfo.latestBlockHeight;\n  }\n\n  async getAccount(searchAddress) {\n    try {\n      const account = await this.forceGetQueryClient().auth.account(searchAddress);\n      return account ? accounts_1.accountFromAny(account) : null;\n    } catch (error) {\n      if (/rpc error: code = NotFound/i.test(error)) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * @deprecated Verified queries are not supported with Cosmos SDK 0.44+.\n   * See \"Known limitations\" in README.md.\n   * Will be rmoved in CosmJS 0.27 (https://github.com/cosmos/cosmjs/pull/910).\n   */\n\n\n  async getAccountVerified(searchAddress) {\n    const account = await this.forceGetQueryClient().auth.verified.account(searchAddress);\n    return account ? accounts_1.accountFromAny(account) : null;\n  }\n\n  async getSequence(address) {\n    const account = await this.getAccount(address);\n\n    if (!account) {\n      throw new Error(\"Account does not exist on chain. Send some tokens there before trying to query sequence.\");\n    }\n\n    return {\n      accountNumber: account.accountNumber,\n      sequence: account.sequence\n    };\n  }\n\n  async getBlock(height) {\n    const response = await this.forceGetTmClient().block(height);\n    return {\n      id: encoding_1.toHex(response.blockId.hash).toUpperCase(),\n      header: {\n        version: {\n          block: new math_1.Uint53(response.block.header.version.block).toString(),\n          app: new math_1.Uint53(response.block.header.version.app).toString()\n        },\n        height: response.block.header.height,\n        chainId: response.block.header.chainId,\n        time: tendermint_rpc_1.toRfc3339WithNanoseconds(response.block.header.time)\n      },\n      txs: response.block.txs\n    };\n  }\n\n  async getBalance(address, searchDenom) {\n    return this.forceGetQueryClient().bank.balance(address, searchDenom);\n  }\n  /**\n   * Queries all balances for all denoms that belong to this address.\n   *\n   * Uses the grpc queries (which iterates over the store internally), and we cannot get\n   * proofs from such a method.\n   */\n\n\n  async getAllBalances(address) {\n    return this.forceGetQueryClient().bank.allBalances(address);\n  }\n\n  async getDelegation(delegatorAddress, validatorAddress) {\n    var _a;\n\n    let delegatedAmount;\n\n    try {\n      delegatedAmount = (_a = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse) === null || _a === void 0 ? void 0 : _a.balance;\n    } catch (e) {\n      if (e.toString().includes(\"key not found\")) {// ignore, `delegatedAmount` remains undefined\n      } else {\n        throw e;\n      }\n    }\n\n    return delegatedAmount || null;\n  }\n\n  async getTx(id) {\n    var _a;\n\n    const results = await this.txsQuery(`tx.hash='${id}'`);\n    return (_a = results[0]) !== null && _a !== void 0 ? _a : null;\n  }\n\n  async searchTx(query) {\n    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const minHeight = filter.minHeight || 0;\n    const maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n    if (maxHeight < minHeight) return []; // optional optimization\n\n    function withFilters(originalQuery) {\n      return `${originalQuery} AND tx.height>=${minHeight} AND tx.height<=${maxHeight}`;\n    }\n\n    let txs;\n\n    if (search_1.isSearchByHeightQuery(query)) {\n      txs = query.height >= minHeight && query.height <= maxHeight ? await this.txsQuery(`tx.height=${query.height}`) : [];\n    } else if (search_1.isSearchBySentFromOrToQuery(query)) {\n      const sentQuery = withFilters(`message.module='bank' AND transfer.sender='${query.sentFromOrTo}'`);\n      const receivedQuery = withFilters(`message.module='bank' AND transfer.recipient='${query.sentFromOrTo}'`);\n      const [sent, received] = await Promise.all([sentQuery, receivedQuery].map(rawQuery => this.txsQuery(rawQuery)));\n      const sentHashes = sent.map(t => t.hash);\n      txs = [...sent, ...received.filter(t => !sentHashes.includes(t.hash))];\n    } else if (search_1.isSearchByTagsQuery(query)) {\n      const rawQuery = withFilters(query.tags.map(t => `${t.key}='${t.value}'`).join(\" AND \"));\n      txs = await this.txsQuery(rawQuery);\n    } else {\n      throw new Error(\"Unknown query type\");\n    }\n\n    const filtered = txs.filter(tx => tx.height >= minHeight && tx.height <= maxHeight);\n    return filtered;\n  }\n\n  disconnect() {\n    if (this.tmClient) this.tmClient.disconnect();\n  }\n  /**\n   * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n   *\n   * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n   * an error is thrown.\n   *\n   * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n   *\n   * If the transaction is included in a block, a `BroadcastTxResponse` is returned. The caller then\n   * usually needs to check for execution success or failure.\n   */\n\n\n  async broadcastTx(tx) {\n    let timeoutMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60000;\n    let pollIntervalMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3000;\n    let timedOut = false;\n    const txPollTimeout = setTimeout(() => {\n      timedOut = true;\n    }, timeoutMs);\n\n    const pollForTx = async txId => {\n      if (timedOut) {\n        throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later.`, txId);\n      }\n\n      await utils_1.sleep(pollIntervalMs);\n      const result = await this.getTx(txId);\n      return result ? {\n        code: result.code,\n        height: result.height,\n        rawLog: result.rawLog,\n        transactionHash: txId,\n        gasUsed: result.gasUsed,\n        gasWanted: result.gasWanted\n      } : pollForTx(txId);\n    };\n\n    const broadcasted = await this.forceGetTmClient().broadcastTxSync({\n      tx\n    });\n\n    if (broadcasted.code) {\n      throw new Error(`Broadcasting transaction failed with code ${broadcasted.code} (codespace: ${broadcasted.codeSpace}). Log: ${broadcasted.log}`);\n    }\n\n    const transactionId = encoding_1.toHex(broadcasted.hash).toUpperCase();\n    return new Promise((resolve, reject) => pollForTx(transactionId).then(value => {\n      clearTimeout(txPollTimeout);\n      resolve(value);\n    }, error => {\n      clearTimeout(txPollTimeout);\n      reject(error);\n    }));\n  }\n\n  async txsQuery(query) {\n    const results = await this.forceGetTmClient().txSearchAll({\n      query: query\n    });\n    return results.txs.map(tx => {\n      return {\n        height: tx.height,\n        hash: encoding_1.toHex(tx.hash).toUpperCase(),\n        code: tx.result.code,\n        rawLog: tx.result.log || \"\",\n        tx: tx.tx,\n        gasUsed: tx.result.gasUsed,\n        gasWanted: tx.result.gasWanted\n      };\n    });\n  }\n\n}\n\nexports.StargateClient = StargateClient;","map":{"version":3,"mappings":"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","names":["TimeoutError","Error","constructor","message","txId","exports","isBroadcastTxFailure","result","code","isBroadcastTxSuccess","assertIsBroadcastTxSuccess","transactionHash","height","rawLog","StargateClient","tmClient","queryClient","queries_1","withExtensions","connect","endpoint","tendermint_rpc_1","getTmClient","forceGetTmClient","getQueryClient","forceGetQueryClient","getChainId","chainId","response","status","nodeInfo","network","getHeight","syncInfo","latestBlockHeight","getAccount","searchAddress","account","auth","accounts_1","error","test","getAccountVerified","verified","getSequence","address","accountNumber","sequence","getBlock","block","id","encoding_1","blockId","hash","toUpperCase","header","version","math_1","toString","app","time","txs","getBalance","searchDenom","bank","balance","getAllBalances","allBalances","getDelegation","delegatorAddress","validatorAddress","delegatedAmount","staking","delegation","delegationResponse","_a","e","includes","getTx","results","txsQuery","searchTx","query","filter","minHeight","maxHeight","Number","MAX_SAFE_INTEGER","withFilters","originalQuery","search_1","sentQuery","sentFromOrTo","receivedQuery","sent","received","Promise","all","map","rawQuery","sentHashes","t","tags","key","value","join","filtered","tx","disconnect","broadcastTx","timeoutMs","pollIntervalMs","timedOut","txPollTimeout","setTimeout","pollForTx","utils_1","gasUsed","gasWanted","broadcasted","broadcastTxSync","codeSpace","log","transactionId","resolve","reject","then","clearTimeout","txSearchAll"],"sourceRoot":"","sources":["../src/stargateclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}