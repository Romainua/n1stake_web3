{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst stargate_1 = require(\"@cosmjs/stargate\");\n\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst types_1 = require(\"cosmjs-types/cosmwasm/wasm/v1/types\");\n\nconst queries_1 = require(\"./queries\");\n\nclass CosmWasmClient {\n  constructor(tmClient) {\n    this.codesCache = new Map();\n\n    if (tmClient) {\n      this.tmClient = tmClient;\n      this.queryClient = stargate_1.QueryClient.withExtensions(tmClient, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, queries_1.setupWasmExtension);\n    }\n  }\n\n  static async connect(endpoint) {\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new CosmWasmClient(tmClient);\n  }\n\n  getTmClient() {\n    return this.tmClient;\n  }\n\n  forceGetTmClient() {\n    if (!this.tmClient) {\n      throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n    }\n\n    return this.tmClient;\n  }\n\n  getQueryClient() {\n    return this.queryClient;\n  }\n\n  forceGetQueryClient() {\n    if (!this.queryClient) {\n      throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n    }\n\n    return this.queryClient;\n  }\n\n  async getChainId() {\n    if (!this.chainId) {\n      const response = await this.forceGetTmClient().status();\n      const chainId = response.nodeInfo.network;\n      if (!chainId) throw new Error(\"Chain ID must not be empty\");\n      this.chainId = chainId;\n    }\n\n    return this.chainId;\n  }\n\n  async getHeight() {\n    const status = await this.forceGetTmClient().status();\n    return status.syncInfo.latestBlockHeight;\n  }\n\n  async getAccount(searchAddress) {\n    try {\n      const account = await this.forceGetQueryClient().auth.account(searchAddress);\n      return account ? stargate_1.accountFromAny(account) : null;\n    } catch (error) {\n      if (/rpc error: code = NotFound/i.test(error)) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n\n  async getSequence(address) {\n    const account = await this.getAccount(address);\n\n    if (!account) {\n      throw new Error(\"Account does not exist on chain. Send some tokens there before trying to query sequence.\");\n    }\n\n    return {\n      accountNumber: account.accountNumber,\n      sequence: account.sequence\n    };\n  }\n\n  async getBlock(height) {\n    const response = await this.forceGetTmClient().block(height);\n    return {\n      id: encoding_1.toHex(response.blockId.hash).toUpperCase(),\n      header: {\n        version: {\n          block: new math_1.Uint53(response.block.header.version.block).toString(),\n          app: new math_1.Uint53(response.block.header.version.app).toString()\n        },\n        height: response.block.header.height,\n        chainId: response.block.header.chainId,\n        time: tendermint_rpc_1.toRfc3339WithNanoseconds(response.block.header.time)\n      },\n      txs: response.block.txs\n    };\n  }\n\n  async getBalance(address, searchDenom) {\n    return this.forceGetQueryClient().bank.balance(address, searchDenom);\n  }\n\n  async getTx(id) {\n    var _a;\n\n    const results = await this.txsQuery(`tx.hash='${id}'`);\n    return (_a = results[0]) !== null && _a !== void 0 ? _a : null;\n  }\n\n  async searchTx(query) {\n    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const minHeight = filter.minHeight || 0;\n    const maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n    if (maxHeight < minHeight) return []; // optional optimization\n\n    function withFilters(originalQuery) {\n      return `${originalQuery} AND tx.height>=${minHeight} AND tx.height<=${maxHeight}`;\n    }\n\n    let txs;\n\n    if (stargate_1.isSearchByHeightQuery(query)) {\n      txs = query.height >= minHeight && query.height <= maxHeight ? await this.txsQuery(`tx.height=${query.height}`) : [];\n    } else if (stargate_1.isSearchBySentFromOrToQuery(query)) {\n      const sentQuery = withFilters(`message.module='bank' AND transfer.sender='${query.sentFromOrTo}'`);\n      const receivedQuery = withFilters(`message.module='bank' AND transfer.recipient='${query.sentFromOrTo}'`);\n      const [sent, received] = await Promise.all([sentQuery, receivedQuery].map(rawQuery => this.txsQuery(rawQuery)));\n      const sentHashes = sent.map(t => t.hash);\n      txs = [...sent, ...received.filter(t => !sentHashes.includes(t.hash))];\n    } else if (stargate_1.isSearchByTagsQuery(query)) {\n      const rawQuery = withFilters(query.tags.map(t => `${t.key}='${t.value}'`).join(\" AND \"));\n      txs = await this.txsQuery(rawQuery);\n    } else {\n      throw new Error(\"Unknown query type\");\n    }\n\n    const filtered = txs.filter(tx => tx.height >= minHeight && tx.height <= maxHeight);\n    return filtered;\n  }\n\n  disconnect() {\n    if (this.tmClient) this.tmClient.disconnect();\n  }\n  /**\n   * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n   *\n   * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n   * an error is thrown.\n   *\n   * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n   *\n   * If the transaction is included in a block, a `BroadcastTxResponse` is returned. The caller then\n   * usually needs to check for execution success or failure.\n   */\n  // NOTE: This method is tested against slow chains and timeouts in the @cosmjs/stargate package.\n  // Make sure it is kept in sync!\n\n\n  async broadcastTx(tx) {\n    let timeoutMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60000;\n    let pollIntervalMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3000;\n    let timedOut = false;\n    const txPollTimeout = setTimeout(() => {\n      timedOut = true;\n    }, timeoutMs);\n\n    const pollForTx = async txId => {\n      if (timedOut) {\n        throw new stargate_1.TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later.`, txId);\n      }\n\n      await utils_1.sleep(pollIntervalMs);\n      const result = await this.getTx(txId);\n      return result ? {\n        code: result.code,\n        height: result.height,\n        rawLog: result.rawLog,\n        transactionHash: txId,\n        gasUsed: result.gasUsed,\n        gasWanted: result.gasWanted\n      } : pollForTx(txId);\n    };\n\n    const broadcasted = await this.forceGetTmClient().broadcastTxSync({\n      tx\n    });\n\n    if (broadcasted.code) {\n      throw new Error(`Broadcasting transaction failed with code ${broadcasted.code} (codespace: ${broadcasted.codeSpace}). Log: ${broadcasted.log}`);\n    }\n\n    const transactionId = encoding_1.toHex(broadcasted.hash).toUpperCase();\n    return new Promise((resolve, reject) => pollForTx(transactionId).then(value => {\n      clearTimeout(txPollTimeout);\n      resolve(value);\n    }, error => {\n      clearTimeout(txPollTimeout);\n      reject(error);\n    }));\n  }\n\n  async getCodes() {\n    const {\n      codeInfos\n    } = await this.forceGetQueryClient().wasm.listCodeInfo();\n    return (codeInfos || []).map(entry => {\n      utils_1.assert(entry.creator && entry.codeId && entry.dataHash, \"entry incomplete\");\n      return {\n        id: entry.codeId.toNumber(),\n        creator: entry.creator,\n        checksum: encoding_1.toHex(entry.dataHash)\n      };\n    });\n  }\n\n  async getCodeDetails(codeId) {\n    const cached = this.codesCache.get(codeId);\n    if (cached) return cached;\n    const {\n      codeInfo,\n      data\n    } = await this.forceGetQueryClient().wasm.getCode(codeId);\n    utils_1.assert(codeInfo && codeInfo.codeId && codeInfo.creator && codeInfo.dataHash && data, \"codeInfo missing or incomplete\");\n    const codeDetails = {\n      id: codeInfo.codeId.toNumber(),\n      creator: codeInfo.creator,\n      checksum: encoding_1.toHex(codeInfo.dataHash),\n      data: data\n    };\n    this.codesCache.set(codeId, codeDetails);\n    return codeDetails;\n  }\n\n  async getContracts(codeId) {\n    // TODO: handle pagination - accept as arg or auto-loop\n    const {\n      contracts\n    } = await this.forceGetQueryClient().wasm.listContractsByCodeId(codeId);\n    return contracts;\n  }\n  /**\n   * Throws an error if no contract was found at the address\n   */\n\n\n  async getContract(address) {\n    const {\n      address: retrievedAddress,\n      contractInfo\n    } = await this.forceGetQueryClient().wasm.getContractInfo(address);\n    if (!contractInfo) throw new Error(`No contract found at address \"${address}\"`);\n    utils_1.assert(retrievedAddress, \"address missing\");\n    utils_1.assert(contractInfo.codeId && contractInfo.creator && contractInfo.label, \"contractInfo incomplete\");\n    return {\n      address: retrievedAddress,\n      codeId: contractInfo.codeId.toNumber(),\n      creator: contractInfo.creator,\n      admin: contractInfo.admin || undefined,\n      label: contractInfo.label,\n      ibcPortId: contractInfo.ibcPortId || undefined\n    };\n  }\n  /**\n   * Throws an error if no contract was found at the address\n   */\n\n\n  async getContractCodeHistory(address) {\n    const result = await this.forceGetQueryClient().wasm.getContractCodeHistory(address);\n    if (!result) throw new Error(`No contract history found for address \"${address}\"`);\n    const operations = {\n      [types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT]: \"Init\",\n      [types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS]: \"Genesis\",\n      [types_1.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE]: \"Migrate\"\n    };\n    return (result.entries || []).map(entry => {\n      utils_1.assert(entry.operation && entry.codeId && entry.msg);\n      return {\n        operation: operations[entry.operation],\n        codeId: entry.codeId.toNumber(),\n        msg: JSON.parse(encoding_1.fromAscii(entry.msg))\n      };\n    });\n  }\n  /**\n   * Returns the data at the key if present (raw contract dependent storage data)\n   * or null if no data at this key.\n   *\n   * Promise is rejected when contract does not exist.\n   */\n\n\n  async queryContractRaw(address, key) {\n    // just test contract existence\n    await this.getContract(address);\n    const {\n      data\n    } = await this.forceGetQueryClient().wasm.queryContractRaw(address, key);\n    return data !== null && data !== void 0 ? data : null;\n  }\n  /**\n   * Makes a smart query on the contract, returns the parsed JSON document.\n   *\n   * Promise is rejected when contract does not exist.\n   * Promise is rejected for invalid query format.\n   * Promise is rejected for invalid response format.\n   */\n\n\n  async queryContractSmart(address, queryMsg) {\n    try {\n      return await this.forceGetQueryClient().wasm.queryContractSmart(address, queryMsg);\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message.startsWith(\"not found: contract\")) {\n          throw new Error(`No contract found at address \"${address}\"`);\n        } else {\n          throw error;\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async txsQuery(query) {\n    const results = await this.forceGetTmClient().txSearchAll({\n      query: query\n    });\n    return results.txs.map(tx => {\n      return {\n        height: tx.height,\n        hash: encoding_1.toHex(tx.hash).toUpperCase(),\n        code: tx.result.code,\n        rawLog: tx.result.log || \"\",\n        tx: tx.tx,\n        gasUsed: tx.result.gasUsed,\n        gasWanted: tx.result.gasWanted\n      };\n    });\n  }\n\n}\n\nexports.CosmWasmClient = CosmWasmClient;","map":{"version":3,"mappings":"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","names":["CosmWasmClient","constructor","tmClient","Map","queryClient","stargate_1","withExtensions","queries_1","connect","endpoint","tendermint_rpc_1","getTmClient","forceGetTmClient","Error","getQueryClient","forceGetQueryClient","getChainId","chainId","response","status","nodeInfo","network","getHeight","syncInfo","latestBlockHeight","getAccount","searchAddress","account","auth","error","test","getSequence","address","accountNumber","sequence","getBlock","height","block","id","encoding_1","blockId","hash","toUpperCase","header","version","math_1","toString","app","time","txs","getBalance","searchDenom","bank","balance","getTx","results","txsQuery","_a","searchTx","query","filter","minHeight","maxHeight","Number","MAX_SAFE_INTEGER","withFilters","originalQuery","sentQuery","sentFromOrTo","receivedQuery","sent","received","Promise","all","map","rawQuery","sentHashes","t","includes","tags","key","value","join","filtered","tx","disconnect","broadcastTx","timeoutMs","pollIntervalMs","timedOut","txPollTimeout","setTimeout","pollForTx","txId","utils_1","result","code","rawLog","transactionHash","gasUsed","gasWanted","broadcasted","broadcastTxSync","codeSpace","log","transactionId","resolve","reject","then","clearTimeout","getCodes","codeInfos","wasm","listCodeInfo","entry","creator","codeId","dataHash","toNumber","checksum","getCodeDetails","cached","codesCache","get","codeInfo","data","getCode","codeDetails","set","getContracts","contracts","listContractsByCodeId","getContract","retrievedAddress","contractInfo","getContractInfo","label","admin","undefined","ibcPortId","getContractCodeHistory","operations","types_1","CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT","CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS","CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE","entries","operation","msg","JSON","parse","queryContractRaw","queryContractSmart","queryMsg","message","startsWith","txSearchAll","exports"],"sourceRoot":"","sources":["../src/cosmwasmclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}