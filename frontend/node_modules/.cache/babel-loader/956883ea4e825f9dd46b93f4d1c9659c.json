{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateFee = exports.GasPrice = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n/**\n * Denom checker for the Cosmos SDK 0.42 denom pattern\n * (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n *\n * This is like a regexp but with helpful error messages.\n */\n\n\nfunction checkDenom(denom) {\n  if (denom.length < 3 || denom.length > 128) {\n    throw new Error(\"Denom must be between 3 and 128 characters\");\n  }\n}\n/**\n * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of\n * the smallest fee token unit, such as 0.012utoken.\n *\n * This is the same as GasPrice from @cosmjs/launchpad but those might diverge in the future.\n */\n\n\nclass GasPrice {\n  constructor(amount, denom) {\n    this.amount = amount;\n    this.denom = denom;\n  }\n  /**\n   * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString(\"0.012utoken\")`.\n   *\n   * The denom must match the Cosmos SDK 0.42 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n   * See `GasPrice` in @cosmjs/stargate for a more generic matcher.\n   *\n   * Separators are not yet supported.\n   */\n\n\n  static fromString(gasPrice) {\n    // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages\n    const matchResult = gasPrice.match(/^([0-9.]+)([a-z][a-z0-9]*)$/i);\n\n    if (!matchResult) {\n      throw new Error(\"Invalid gas price string\");\n    }\n\n    const [_, amount, denom] = matchResult;\n    checkDenom(denom);\n    const fractionalDigits = 18;\n    const decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n    return new GasPrice(decimalAmount, denom);\n  }\n\n}\n\nexports.GasPrice = GasPrice;\n\nfunction calculateFee(gasLimit, gasPrice) {\n  const processedGasPrice = typeof gasPrice === \"string\" ? GasPrice.fromString(gasPrice) : gasPrice;\n  const {\n    denom,\n    amount: gasPriceAmount\n  } = processedGasPrice;\n  const amount = Math.ceil(gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).toFloatApproximation());\n  return {\n    amount: proto_signing_1.coins(amount, denom),\n    gas: gasLimit.toString()\n  };\n}\n\nexports.calculateFee = calculateFee;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;AAEA;;;;;;;;AAMA,SAASA,UAAT,CAAoBC,KAApB,EAAiC;EAC/B,IAAIA,KAAK,CAACC,MAAN,GAAe,CAAf,IAAoBD,KAAK,CAACC,MAAN,GAAe,GAAvC,EAA4C;IAC1C,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;EACD;AACF;AAED;;;;;;;;AAMA,MAAaC,QAAb,CAAqB;EAInBC,YAAmBC,MAAnB,EAAoCL,KAApC,EAAiD;IAC/C,KAAKK,MAAL,GAAcA,MAAd;IACA,KAAKL,KAAL,GAAaA,KAAb;EACD;EAED;;;;;;;;;;EAQwB,OAAVM,UAAU,CAACC,QAAD,EAAiB;IACvC;IACA,MAAMC,WAAW,GAAGD,QAAQ,CAACE,KAAT,CAAe,8BAAf,CAApB;;IACA,IAAI,CAACD,WAAL,EAAkB;MAChB,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;IACD;;IACD,MAAM,CAACQ,CAAD,EAAIL,MAAJ,EAAYL,KAAZ,IAAqBQ,WAA3B;IACAT,UAAU,CAACC,KAAD,CAAV;IACA,MAAMW,gBAAgB,GAAG,EAAzB;IACA,MAAMC,aAAa,GAAGC,eAAQC,aAAR,CAAsBT,MAAtB,EAA8BM,gBAA9B,CAAtB;IACA,OAAO,IAAIR,QAAJ,CAAaS,aAAb,EAA4BZ,KAA5B,CAAP;EACD;;AA5BkB;;AAArBe;;AA+BA,SAAgBC,YAAhB,CAA6BC,QAA7B,EAA+CV,QAA/C,EAA0E;EACxE,MAAMW,iBAAiB,GAAG,OAAOX,QAAP,KAAoB,QAApB,GAA+BJ,QAAQ,CAACG,UAAT,CAAoBC,QAApB,CAA/B,GAA+DA,QAAzF;EACA,MAAM;IAAEP,KAAF;IAASK,MAAM,EAAEc;EAAjB,IAAoCD,iBAA1C;EACA,MAAMb,MAAM,GAAGe,IAAI,CAACC,IAAL,CAAUF,cAAc,CAACG,QAAf,CAAwB,IAAIT,aAAJ,CAAWI,QAAX,CAAxB,EAA8CM,oBAA9C,EAAV,CAAf;EACA,OAAO;IACLlB,MAAM,EAAEmB,sBAAMnB,MAAN,EAAcL,KAAd,CADH;IAELyB,GAAG,EAAER,QAAQ,CAACS,QAAT;EAFA,CAAP;AAID;;AARDX","names":["checkDenom","denom","length","Error","GasPrice","constructor","amount","fromString","gasPrice","matchResult","match","_","fractionalDigits","decimalAmount","math_1","fromUserInput","exports","calculateFee","gasLimit","processedGasPrice","gasPriceAmount","Math","ceil","multiply","toFloatApproximation","proto_signing_1","gas","toString"],"sourceRoot":"","sources":["../src/fee.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}