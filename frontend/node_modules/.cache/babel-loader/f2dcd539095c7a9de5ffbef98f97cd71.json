{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = exports.supportedAlgorithms = exports.executeKdf = exports.cosmjsSalt = void 0;\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n/**\n * A fixed salt is chosen to archive a deterministic password to key derivation.\n * This reduces the scope of a potential rainbow attack to all CosmJS users.\n * Must be 16 bytes due to implementation limitations.\n */\n\n\nexports.cosmjsSalt = encoding_1.toAscii(\"The CosmJS salt.\");\n\nasync function executeKdf(password, configuration) {\n  switch (configuration.algorithm) {\n    case \"argon2id\":\n      {\n        const options = configuration.params;\n        if (!crypto_1.isArgon2idOptions(options)) throw new Error(\"Invalid format of argon2id params\");\n        return crypto_1.Argon2id.execute(password, exports.cosmjsSalt, options);\n      }\n\n    default:\n      throw new Error(\"Unsupported KDF algorithm\");\n  }\n}\n\nexports.executeKdf = executeKdf;\nexports.supportedAlgorithms = {\n  xchacha20poly1305Ietf: \"xchacha20poly1305-ietf\"\n};\n\nasync function encrypt(plaintext, encryptionKey, config) {\n  switch (config.algorithm) {\n    case exports.supportedAlgorithms.xchacha20poly1305Ietf:\n      {\n        const nonce = crypto_1.Random.getBytes(crypto_1.xchacha20NonceLength); // Prepend fixed-length nonce to ciphertext as suggested in the example from https://github.com/jedisct1/libsodium.js#api\n\n        return new Uint8Array([...nonce, ...(await crypto_1.Xchacha20poly1305Ietf.encrypt(plaintext, encryptionKey, nonce))]);\n      }\n\n    default:\n      throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n  }\n}\n\nexports.encrypt = encrypt;\n\nasync function decrypt(ciphertext, encryptionKey, config) {\n  switch (config.algorithm) {\n    case exports.supportedAlgorithms.xchacha20poly1305Ietf:\n      {\n        const nonce = ciphertext.slice(0, crypto_1.xchacha20NonceLength);\n        return crypto_1.Xchacha20poly1305Ietf.decrypt(ciphertext.slice(crypto_1.xchacha20NonceLength), encryptionKey, nonce);\n      }\n\n    default:\n      throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n  }\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAOA;AAEA;;;;;;;AAKaA,qBAAaC,mBAAQ,kBAAR,CAAb;;AAWN,eAAeC,UAAf,CAA0BC,QAA1B,EAA4CC,aAA5C,EAA2E;EAChF,QAAQA,aAAa,CAACC,SAAtB;IACE,KAAK,UAAL;MAAiB;QACf,MAAMC,OAAO,GAAGF,aAAa,CAACG,MAA9B;QACA,IAAI,CAACC,2BAAkBF,OAAlB,CAAL,EAAiC,MAAM,IAAIG,KAAJ,CAAU,mCAAV,CAAN;QACjC,OAAOD,kBAASE,OAAT,CAAiBP,QAAjB,EAA2BH,kBAA3B,EAAuCM,OAAvC,CAAP;MACD;;IACD;MACE,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;EAPJ;AASD;;AAVDT;AAyBaA,8BAAsB;EACjCW,qBAAqB,EAAE;AADU,CAAtB;;AAIN,eAAeC,OAAf,CACLC,SADK,EAELC,aAFK,EAGLC,MAHK,EAG0B;EAE/B,QAAQA,MAAM,CAACV,SAAf;IACE,KAAKL,4BAAoBW,qBAAzB;MAAgD;QAC9C,MAAMK,KAAK,GAAGR,gBAAOS,QAAP,CAAgBT,6BAAhB,CAAd,CAD8C,CAE9C;;QACA,OAAO,IAAIU,UAAJ,CAAe,CACpB,GAAGF,KADiB,EAEpB,IAAI,MAAMR,+BAAsBI,OAAtB,CAA8BC,SAA9B,EAAyCC,aAAzC,EAAwDE,KAAxD,CAAV,CAFoB,CAAf,CAAP;MAID;;IACD;MACE,MAAM,IAAIP,KAAJ,CAAU,sCAAsCM,MAAM,CAACV,SAAS,GAAhE,CAAN;EAVJ;AAYD;;AAjBDL;;AAmBO,eAAemB,OAAf,CACLC,UADK,EAELN,aAFK,EAGLC,MAHK,EAG0B;EAE/B,QAAQA,MAAM,CAACV,SAAf;IACE,KAAKL,4BAAoBW,qBAAzB;MAAgD;QAC9C,MAAMK,KAAK,GAAGI,UAAU,CAACC,KAAX,CAAiB,CAAjB,EAAoBb,6BAApB,CAAd;QACA,OAAOA,+BAAsBW,OAAtB,CAA8BC,UAAU,CAACC,KAAX,CAAiBb,6BAAjB,CAA9B,EAAsEM,aAAtE,EAAqFE,KAArF,CAAP;MACD;;IACD;MACE,MAAM,IAAIP,KAAJ,CAAU,sCAAsCM,MAAM,CAACV,SAAS,GAAhE,CAAN;EANJ;AAQD;;AAbDL","names":["exports","encoding_1","executeKdf","password","configuration","algorithm","options","params","crypto_1","Error","execute","xchacha20poly1305Ietf","encrypt","plaintext","encryptionKey","config","nonce","getBytes","Uint8Array","decrypt","ciphertext","slice"],"sourceRoot":"","sources":["../src/wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}