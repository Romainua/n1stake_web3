{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupWasmExtension = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst stargate_1 = require(\"@cosmjs/stargate\");\n\nconst query_1 = require(\"cosmjs-types/cosmwasm/wasm/v1/query\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nfunction setupWasmExtension(base) {\n  const rpc = stargate_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    wasm: {\n      listCodeInfo: async paginationKey => {\n        const request = {\n          pagination: stargate_1.createPagination(paginationKey)\n        };\n        return queryService.Codes(request);\n      },\n      getCode: async id => {\n        const request = {\n          codeId: long_1.default.fromNumber(id)\n        };\n        return queryService.Code(request);\n      },\n      listContractsByCodeId: async (id, paginationKey) => {\n        const request = {\n          codeId: long_1.default.fromNumber(id),\n          pagination: stargate_1.createPagination(paginationKey)\n        };\n        return queryService.ContractsByCode(request);\n      },\n      getContractInfo: async address => {\n        const request = {\n          address: address\n        };\n        return queryService.ContractInfo(request);\n      },\n      getContractCodeHistory: async (address, paginationKey) => {\n        const request = {\n          address: address,\n          pagination: stargate_1.createPagination(paginationKey)\n        };\n        return queryService.ContractHistory(request);\n      },\n      getAllContractState: async (address, paginationKey) => {\n        const request = {\n          address: address,\n          pagination: stargate_1.createPagination(paginationKey)\n        };\n        return queryService.AllContractState(request);\n      },\n      queryContractRaw: async (address, key) => {\n        const request = {\n          address: address,\n          queryData: key\n        };\n        return queryService.RawContractState(request);\n      },\n      queryContractSmart: async (address, query) => {\n        const request = {\n          address: address,\n          queryData: encoding_1.toAscii(JSON.stringify(query))\n        };\n        const {\n          data\n        } = await queryService.SmartContractState(request); // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n\n        let responseText;\n\n        try {\n          responseText = encoding_1.fromUtf8(data);\n        } catch (error) {\n          throw new Error(`Could not UTF-8 decode smart query response from contract: ${error}`);\n        }\n\n        try {\n          return JSON.parse(responseText);\n        } catch (error) {\n          throw new Error(`Could not JSON parse smart query response from contract: ${error}`);\n        }\n      }\n    }\n  };\n}\n\nexports.setupWasmExtension = setupWasmExtension;","map":{"version":3,"mappings":"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","names":["setupWasmExtension","base","rpc","stargate_1","queryService","query_1","wasm","listCodeInfo","paginationKey","request","pagination","Codes","getCode","id","codeId","long_1","fromNumber","Code","listContractsByCodeId","ContractsByCode","getContractInfo","address","ContractInfo","getContractCodeHistory","ContractHistory","getAllContractState","AllContractState","queryContractRaw","key","queryData","RawContractState","queryContractSmart","query","encoding_1","JSON","stringify","data","SmartContractState","responseText","error","Error","parse","exports"],"sourceRoot":"","sources":["../../src/queries/wasm.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}