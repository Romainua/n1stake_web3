{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst stargate_1 = require(\"@cosmjs/stargate\");\n\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\n\nconst tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\n\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\n\nconst tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst tx_4 = require(\"cosmjs-types/cosmwasm/wasm/v1/tx\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst pako_1 = __importDefault(require(\"pako\"));\n\nconst aminotypes_1 = require(\"./aminotypes\");\n\nconst cosmwasmclient_1 = require(\"./cosmwasmclient\");\n\nfunction createBroadcastTxErrorMessage(result) {\n  return `Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`;\n}\n\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry([...stargate_1.defaultRegistryTypes, [\"/cosmwasm.wasm.v1.MsgClearAdmin\", tx_4.MsgClearAdmin], [\"/cosmwasm.wasm.v1.MsgExecuteContract\", tx_4.MsgExecuteContract], [\"/cosmwasm.wasm.v1.MsgMigrateContract\", tx_4.MsgMigrateContract], [\"/cosmwasm.wasm.v1.MsgStoreCode\", tx_4.MsgStoreCode], [\"/cosmwasm.wasm.v1.MsgInstantiateContract\", tx_4.MsgInstantiateContract], [\"/cosmwasm.wasm.v1.MsgUpdateAdmin\", tx_4.MsgUpdateAdmin]]);\n}\n\nclass SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {\n  constructor(tmClient, signer, options) {\n    super(tmClient);\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new stargate_1.AminoTypes({\n        additions: aminotypes_1.cosmWasmTypes,\n        prefix: options.prefix\n      })\n    } = options;\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n  }\n\n  static async connectWithSigner(endpoint, signer) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningCosmWasmClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n\n\n  static async offline(signer) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new SigningCosmWasmClient(undefined, signer, options);\n  }\n  /** Uploads code and returns a receipt, including the code ID */\n\n\n  async upload(senderAddress, wasmCode, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const compressed = pako_1.default.gzip(wasmCode, {\n      level: 9\n    });\n    const storeCodeMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\",\n      value: tx_4.MsgStoreCode.fromPartial({\n        sender: senderAddress,\n        wasmByteCode: compressed\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [storeCodeMsg], fee, memo);\n\n    if (stargate_1.isBroadcastTxFailure(result)) {\n      throw new Error(createBroadcastTxErrorMessage(result));\n    }\n\n    const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n    const codeIdAttr = stargate_1.logs.findAttribute(parsedLogs, \"store_code\", \"code_id\");\n    return {\n      originalSize: wasmCode.length,\n      originalChecksum: encoding_1.toHex(crypto_1.sha256(wasmCode)),\n      compressedSize: compressed.length,\n      compressedChecksum: encoding_1.toHex(crypto_1.sha256(compressed)),\n      codeId: Number.parseInt(codeIdAttr.value, 10),\n      logs: parsedLogs,\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async instantiate(senderAddress, codeId, msg, label, fee) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    const instantiateContractMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n      value: tx_4.MsgInstantiateContract.fromPartial({\n        sender: senderAddress,\n        codeId: long_1.default.fromString(new math_1.Uint53(codeId).toString()),\n        label: label,\n        msg: encoding_1.toUtf8(JSON.stringify(msg)),\n        funds: [...(options.funds || [])],\n        admin: options.admin\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [instantiateContractMsg], fee, options.memo);\n\n    if (stargate_1.isBroadcastTxFailure(result)) {\n      throw new Error(createBroadcastTxErrorMessage(result));\n    }\n\n    const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n    const contractAddressAttr = stargate_1.logs.findAttribute(parsedLogs, \"instantiate\", \"_contract_address\");\n    return {\n      contractAddress: contractAddressAttr.value,\n      logs: parsedLogs,\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async updateAdmin(senderAddress, contractAddress, newAdmin, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const updateAdminMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n      value: tx_4.MsgUpdateAdmin.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress,\n        newAdmin: newAdmin\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [updateAdminMsg], fee, memo);\n\n    if (stargate_1.isBroadcastTxFailure(result)) {\n      throw new Error(createBroadcastTxErrorMessage(result));\n    }\n\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async clearAdmin(senderAddress, contractAddress, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const clearAdminMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n      value: tx_4.MsgClearAdmin.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [clearAdminMsg], fee, memo);\n\n    if (stargate_1.isBroadcastTxFailure(result)) {\n      throw new Error(createBroadcastTxErrorMessage(result));\n    }\n\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async migrate(senderAddress, contractAddress, codeId, migrateMsg, fee) {\n    let memo = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"\";\n    const migrateContractMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n      value: tx_4.MsgMigrateContract.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress,\n        codeId: long_1.default.fromString(new math_1.Uint53(codeId).toString()),\n        msg: encoding_1.toUtf8(JSON.stringify(migrateMsg))\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [migrateContractMsg], fee, memo);\n\n    if (stargate_1.isBroadcastTxFailure(result)) {\n      throw new Error(createBroadcastTxErrorMessage(result));\n    }\n\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async execute(senderAddress, contractAddress, msg, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    let funds = arguments.length > 5 ? arguments[5] : undefined;\n    const executeContractMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n      value: tx_4.MsgExecuteContract.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress,\n        msg: encoding_1.toUtf8(JSON.stringify(msg)),\n        funds: [...(funds || [])]\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [executeContractMsg], fee, memo);\n\n    if (stargate_1.isBroadcastTxFailure(result)) {\n      throw new Error(createBroadcastTxErrorMessage(result));\n    }\n\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async sendTokens(senderAddress, recipientAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n  }\n\n  async delegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_2.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress,\n        amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n  }\n\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_2.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress,\n        amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n  }\n\n  async withdrawRewards(delegatorAddress, validatorAddress, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const withdrawDelegatorRewardMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawDelegatorRewardMsg], fee, memo);\n  }\n  /**\n   * Creates a transaction with the given messages, fee and memo. Then signs and broadcasts the transaction.\n   *\n   * @param signerAddress The address that will sign transactions using this instance. The signer must be able to sign with this address.\n   * @param messages\n   * @param fee\n   * @param memo\n   */\n\n\n  async signAndBroadcast(signerAddress, messages, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const txRaw = await this.sign(signerAddress, messages, fee, memo);\n    const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n\n    return proto_signing_1.isOfflineDirectSigner(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n\n  async signAmino(signerAddress, messages, fee, memo, _ref) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref;\n    utils_1.assert(!proto_signing_1.isOfflineDirectSigner(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = amino_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n        memo: signed.memo\n      }\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBody);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = proto_signing_1.makeAuthInfoBytes([{\n      pubkey,\n      sequence: signedSequence\n    }], signed.fee.amount, signedGasLimit, signMode);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [encoding_1.fromBase64(signature.signature)]\n    });\n  }\n\n  async signDirect(signerAddress, messages, fee, memo, _ref2) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref2;\n    utils_1.assert(proto_signing_1.isOfflineDirectSigner(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n    const txBody = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBody);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = proto_signing_1.makeAuthInfoBytes([{\n      pubkey,\n      sequence\n    }], fee.amount, gasLimit);\n    const signDoc = proto_signing_1.makeSignDoc(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [encoding_1.fromBase64(signature.signature)]\n    });\n  }\n\n}\n\nexports.SigningCosmWasmClient = SigningCosmWasmClient;","map":{"version":3,"mappings":"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","names":["createBroadcastTxErrorMessage","result","transactionHash","height","code","rawLog","createDefaultRegistry","proto_signing_1","stargate_1","tx_4","SigningCosmWasmClient","cosmwasmclient_1","constructor","tmClient","signer","options","registry","aminoTypes","additions","aminotypes_1","prefix","broadcastTimeoutMs","broadcastPollIntervalMs","connectWithSigner","endpoint","tendermint_rpc_1","connect","offline","undefined","upload","senderAddress","wasmCode","fee","memo","compressed","pako_1","gzip","level","storeCodeMsg","typeUrl","value","fromPartial","sender","wasmByteCode","signAndBroadcast","Error","parsedLogs","parseRawLog","codeIdAttr","findAttribute","originalSize","length","originalChecksum","encoding_1","crypto_1","compressedSize","compressedChecksum","codeId","Number","parseInt","logs","instantiate","msg","label","instantiateContractMsg","long_1","fromString","math_1","toString","JSON","stringify","funds","admin","contractAddressAttr","contractAddress","updateAdmin","newAdmin","updateAdminMsg","contract","clearAdmin","clearAdminMsg","migrate","migrateMsg","migrateContractMsg","execute","executeContractMsg","sendTokens","recipientAddress","amount","sendMsg","fromAddress","toAddress","delegateTokens","delegatorAddress","validatorAddress","delegateMsg","tx_2","undelegateTokens","undelegateMsg","withdrawRewards","withdrawDelegatorRewardMsg","tx_1","signerAddress","messages","txRaw","sign","txBytes","tx_3","encode","finish","broadcastTx","explicitSignerData","signerData","accountNumber","sequence","getSequence","chainId","getChainId","signDirect","signAmino","utils_1","accountFromSigner","getAccounts","find","account","address","pubkey","amino_1","signMode","signing_1","SIGN_MODE_LEGACY_AMINO_JSON","msgs","map","toAmino","signDoc","signature","signed","signedTxBody","fromAmino","signedTxBodyBytes","signedGasLimit","gas","toNumber","signedSequence","signedAuthInfoBytes","bodyBytes","authInfoBytes","signatures","txBody","txBodyBytes","gasLimit","exports"],"sourceRoot":"","sources":["../src/signingcosmwasmclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}