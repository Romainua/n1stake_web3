{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Params = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst jsonrpc_1 = require(\"../../jsonrpc\");\n\nconst encodings_1 = require(\"../encodings\");\n\nconst requests = __importStar(require(\"../requests\"));\n\nfunction encodeHeightParam(param) {\n  return {\n    height: encodings_1.may(encodings_1.Integer.encode, param.height)\n  };\n}\n\nfunction encodeBlockchainRequestParams(param) {\n  return {\n    minHeight: encodings_1.may(encodings_1.Integer.encode, param.minHeight),\n    maxHeight: encodings_1.may(encodings_1.Integer.encode, param.maxHeight)\n  };\n}\n\nfunction encodeAbciQueryParams(params) {\n  return {\n    path: encodings_1.assertNotEmpty(params.path),\n    data: encoding_1.toHex(params.data),\n    height: encodings_1.may(encodings_1.Integer.encode, params.height),\n    prove: params.prove\n  };\n}\n\nfunction encodeBroadcastTxParams(params) {\n  return {\n    tx: encoding_1.toBase64(encodings_1.assertNotEmpty(params.tx))\n  };\n}\n\nfunction encodeTxParams(params) {\n  return {\n    hash: encoding_1.toBase64(encodings_1.assertNotEmpty(params.hash)),\n    prove: params.prove\n  };\n}\n\nfunction encodeTxSearchParams(params) {\n  return {\n    query: params.query,\n    prove: params.prove,\n    page: encodings_1.may(encodings_1.Integer.encode, params.page),\n    per_page: encodings_1.may(encodings_1.Integer.encode, params.per_page),\n    order_by: params.order_by\n  };\n}\n\nfunction encodeValidatorsParams(params) {\n  return {\n    height: encodings_1.may(encodings_1.Integer.encode, params.height),\n    page: encodings_1.may(encodings_1.Integer.encode, params.page),\n    per_page: encodings_1.may(encodings_1.Integer.encode, params.per_page)\n  };\n}\n\nclass Params {\n  static encodeAbciInfo(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method);\n  }\n\n  static encodeAbciQuery(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeAbciQueryParams(req.params));\n  }\n\n  static encodeBlock(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeHeightParam(req.params));\n  }\n\n  static encodeBlockchain(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeBlockchainRequestParams(req.params));\n  }\n\n  static encodeBlockResults(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeHeightParam(req.params));\n  }\n\n  static encodeBroadcastTx(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeBroadcastTxParams(req.params));\n  }\n\n  static encodeCommit(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeHeightParam(req.params));\n  }\n\n  static encodeGenesis(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method);\n  }\n\n  static encodeHealth(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method);\n  }\n\n  static encodeStatus(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method);\n  }\n\n  static encodeSubscribe(req) {\n    const eventTag = {\n      key: \"tm.event\",\n      value: req.query.type\n    };\n    const query = requests.buildQuery({\n      tags: [eventTag],\n      raw: req.query.raw\n    });\n    return jsonrpc_1.createJsonRpcRequest(\"subscribe\", {\n      query: query\n    });\n  }\n\n  static encodeTx(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeTxParams(req.params));\n  } // TODO: encode params for query string???\n\n\n  static encodeTxSearch(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeTxSearchParams(req.params));\n  }\n\n  static encodeValidators(req) {\n    return jsonrpc_1.createJsonRpcRequest(req.method, encodeValidatorsParams(req.params));\n  }\n\n}\n\nexports.Params = Params;","map":{"version":3,"mappings":"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","names":["encodeHeightParam","param","height","encodings_1","encode","encodeBlockchainRequestParams","minHeight","maxHeight","encodeAbciQueryParams","params","path","data","encoding_1","prove","encodeBroadcastTxParams","tx","encodeTxParams","hash","encodeTxSearchParams","query","page","per_page","order_by","encodeValidatorsParams","Params","encodeAbciInfo","req","jsonrpc_1","method","encodeAbciQuery","encodeBlock","encodeBlockchain","encodeBlockResults","encodeBroadcastTx","encodeCommit","encodeGenesis","encodeHealth","encodeStatus","encodeSubscribe","eventTag","key","value","type","requests","buildQuery","tags","raw","encodeTx","encodeTxSearch","encodeValidators","exports"],"sourceRoot":"","sources":["../../../src/tendermint33/adaptor/requests.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}