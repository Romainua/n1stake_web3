{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst keys_1 = require(\"cosmjs-types/cosmos/crypto/multisig/keys\");\n\nconst keys_2 = require(\"cosmjs-types/cosmos/crypto/secp256k1/keys\");\n\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\n\nfunction encodePubkey(pubkey) {\n  if (amino_1.isSecp256k1Pubkey(pubkey)) {\n    const pubkeyProto = keys_2.PubKey.fromPartial({\n      key: encoding_1.fromBase64(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n      value: Uint8Array.from(keys_2.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if (amino_1.isMultisigThresholdPubkey(pubkey)) {\n    const pubkeyProto = keys_1.LegacyAminoPubKey.fromPartial({\n      threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n      publicKeys: pubkey.value.pubkeys.map(encodePubkey)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n      value: Uint8Array.from(keys_1.LegacyAminoPubKey.encode(pubkeyProto).finish())\n    });\n  } else {\n    throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n  }\n}\n\nexports.encodePubkey = encodePubkey;\n\nfunction decodeSinglePubkey(pubkey) {\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        const {\n          key\n        } = keys_2.PubKey.decode(pubkey.value);\n        return amino_1.encodeSecp256k1Pubkey(key);\n      }\n\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n  }\n}\n\nfunction decodePubkey(pubkey) {\n  if (!pubkey || !pubkey.value) {\n    return null;\n  }\n\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        return decodeSinglePubkey(pubkey);\n      }\n\n    case \"/cosmos.crypto.multisig.LegacyAminoPubKey\":\n      {\n        const {\n          threshold,\n          publicKeys\n        } = keys_1.LegacyAminoPubKey.decode(pubkey.value);\n        const out = {\n          type: \"tendermint/PubKeyMultisigThreshold\",\n          value: {\n            threshold: threshold.toString(),\n            pubkeys: publicKeys.map(decodeSinglePubkey)\n          }\n        };\n        return out;\n      }\n\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized`);\n  }\n}\n\nexports.decodePubkey = decodePubkey;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AAEA,SAAgBA,YAAhB,CAA6BC,MAA7B,EAA2C;EACzC,IAAIC,0BAAkBD,MAAlB,CAAJ,EAA+B;IAC7B,MAAME,WAAW,GAAGC,cAAOC,WAAP,CAAmB;MACrCC,GAAG,EAAEC,sBAAWN,MAAM,CAACO,KAAlB;IADgC,CAAnB,CAApB;IAGA,OAAOC,UAAIJ,WAAJ,CAAgB;MACrBK,OAAO,EAAE,iCADY;MAErBF,KAAK,EAAEG,UAAU,CAACC,IAAX,CAAgBR,cAAOS,MAAP,CAAcV,WAAd,EAA2BW,MAA3B,EAAhB;IAFc,CAAhB,CAAP;EAID,CARD,MAQO,IAAIZ,kCAA0BD,MAA1B,CAAJ,EAAuC;IAC5C,MAAME,WAAW,GAAGY,yBAAkBV,WAAlB,CAA8B;MAChDW,SAAS,EAAEC,cAAOC,UAAP,CAAkBjB,MAAM,CAACO,KAAP,CAAaQ,SAA/B,EAA0CG,QAA1C,EADqC;MAEhDC,UAAU,EAAEnB,MAAM,CAACO,KAAP,CAAaa,OAAb,CAAqBC,GAArB,CAAyBtB,YAAzB;IAFoC,CAA9B,CAApB;IAIA,OAAOS,UAAIJ,WAAJ,CAAgB;MACrBK,OAAO,EAAE,2CADY;MAErBF,KAAK,EAAEG,UAAU,CAACC,IAAX,CAAgBG,yBAAkBF,MAAlB,CAAyBV,WAAzB,EAAsCW,MAAtC,EAAhB;IAFc,CAAhB,CAAP;EAID,CATM,MASA;IACL,MAAM,IAAIS,KAAJ,CAAU,eAAetB,MAAM,CAACuB,IAAI,iBAApC,CAAN;EACD;AACF;;AArBDC;;AAuBA,SAASC,kBAAT,CAA4BzB,MAA5B,EAAuC;EACrC,QAAQA,MAAM,CAACS,OAAf;IACE,KAAK,iCAAL;MAAwC;QACtC,MAAM;UAAEJ;QAAF,IAAUF,cAAOuB,MAAP,CAAc1B,MAAM,CAACO,KAArB,CAAhB;QACA,OAAON,8BAAsBI,GAAtB,CAAP;MACD;;IACD;MACE,MAAM,IAAIiB,KAAJ,CAAU,mBAAmBtB,MAAM,CAACS,OAAO,2CAA3C,CAAN;EANJ;AAQD;;AAED,SAAgBkB,YAAhB,CAA6B3B,MAA7B,EAAgD;EAC9C,IAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACO,KAAvB,EAA8B;IAC5B,OAAO,IAAP;EACD;;EAED,QAAQP,MAAM,CAACS,OAAf;IACE,KAAK,iCAAL;MAAwC;QACtC,OAAOgB,kBAAkB,CAACzB,MAAD,CAAzB;MACD;;IACD,KAAK,2CAAL;MAAkD;QAChD,MAAM;UAAEe,SAAF;UAAaI;QAAb,IAA4BL,yBAAkBY,MAAlB,CAAyB1B,MAAM,CAACO,KAAhC,CAAlC;QACA,MAAMqB,GAAG,GAA4B;UACnCL,IAAI,EAAE,oCAD6B;UAEnChB,KAAK,EAAE;YACLQ,SAAS,EAAEA,SAAS,CAACc,QAAV,EADN;YAELT,OAAO,EAAED,UAAU,CAACE,GAAX,CAAeI,kBAAf;UAFJ;QAF4B,CAArC;QAOA,OAAOG,GAAP;MACD;;IACD;MACE,MAAM,IAAIN,KAAJ,CAAU,mBAAmBtB,MAAM,CAACS,OAAO,iBAA3C,CAAN;EAhBJ;AAkBD;;AAvBDe","names":["encodePubkey","pubkey","amino_1","pubkeyProto","keys_2","fromPartial","key","encoding_1","value","any_1","typeUrl","Uint8Array","from","encode","finish","keys_1","threshold","math_1","fromString","toNumber","publicKeys","pubkeys","map","Error","type","exports","decodeSinglePubkey","decode","decodePubkey","out","toString"],"sourceRoot":"","sources":["../src/pubkey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}